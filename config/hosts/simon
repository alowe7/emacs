(put 'simon 'rcsid 
 "$Id: simon,v 1.3 2000-10-10 18:33:40 cvs Exp $")

(require 'xz-loads)

;(wa)

; this is for vizemacs
;(require 'gnuserv)
;(gnuserv-start)

;(menu-bar-mode -1)

;(debug-on-entry 'crypt-dos-to-unix-region) ; i wonder if this is getting called

; initialization specific to machine woody

(setq doc-directory (concat (getenv "EMACSDIR") "/etc/"))

;(defun review-commands () (interactive)
;  (let ((v  
;  (catch 'done
;    (mapcar '(lambda (x) (if (y-or-n-q-p (format "%s" x)) (throw 'done x)))
;      command-history))))
;    (and v (eval v)))
;)

;(global-set-key '[M-up] 'review-commands)




;(setq *people-database*  "/a/notes/people")
;(setq *psw-people*  "/a/notes/extensions")

(defvar compile-command "make") 

(global-set-key "?" 'find-any-fn)
(autoload 'find-any-fn "xosus" "find the xosus or win32 function doc." t)

; why?
(load "ntime" nil t)
(display-time)

(defun delete-all-other-frames ()
	(interactive)
	"delete all frames except the currently focused one."
	(dolist (a (frame-list))
		(if (not (eq a (selected-frame)))
				(delete-frame a))))

;(setq manual-formatted-dirlist (catlist (getenv "MANPATH")))
(setq manual-formatted-dir-prefix "cat")

(defvar mandirs (catlist (getenv "MANPATH") ?;))

; xz-squish is currently global.  todo: make per process
(add-hook 'xz-load-hook '(lambda () 
			   (xz-squish 2)
			   (setq *xz-lastdb* "~/emacs/.xz.dat")
			   (load-library "xz-helpers")
			   )
	  )
; this will slow down process loading a bit
;; (autoload  'xz-updatep "xzupdate")
;; (add-hook 'start-xz-process-hook 
;; 					'(lambda ()
;;						 (and (string= default-directory "~/emacs/lisp/") (xz-updatep))))

; from url.el

(defvar url-be-asynchronous t
  "*Controls whether document retrievals over HTTP should be done in
the background.  This allows you to keep working in other windows
while large downloads occur.")
(make-variable-buffer-local 'url-be-asynchronous)
(set-default 'url-be-asynchronous t)


(defvar url-basic-auth-storage nil
  "Where usernames and passwords are stored.  Its value is an assoc list of
assoc lists.  The first assoc list is keyed by the server name.  The cdr of
this is an assoc list based on the 'directory' specified by the url we are
looking up.")

(defun w3-diddle-mode-line () 
  (setq mode-line-process (format "  %s" (url-view-url))))

(add-hook 'w3-draw-done-hooks 'w3-diddle-mode-line)

(autoload 'ihw "w3-helpers" "scan a mail message for html" t)

(setq lastdial "psw isdn")

; assume anything in these directories is lisp
(nconc auto-mode-alist
       '(("emacs/lisp" . emacs-lisp-mode)
	 ("emacs/site-lisp" . emacs-lisp-mode)
	 ("emacs/config" . emacs-lisp-mode)))

(global-set-key (vector 'f5) '
		(lambda () (interactive)
		  (revert-buffer nil t)))

(defun ftime () (interactive)
	"display formatted time string last modification time of file for current buffer"
  (let* ((fn (buffer-file-name))
	(f (and fn (elt (file-attributes fn) 5))))
    (message (if f
	(clean-string (eval-process "mktime" "-v" (format "\"%s %s\"" (car f) (cadr f))))
	"no file")
	)
    )
  )

(global-set-key (vector 'f10) 'ftime)

(set-default-font "-*-Lucida Sans Typewriter-normal-r-*-*-16-120-96-96-c-*-iso8859-1")

(defun rhostent (fn host &optional username)
  (loop for x in (split (eval-process "key" "-k" host "-d"  fn) "\n")
	with sword = nil
	thereis 
	(let ((l (split x)))
	  (and (or (not (string* username)) (string= (elt l 3) username))
	       (setq sword (elt l 5))))
	finally return sword))

; (rhostent (expand-file-name "~/n/private/.rhosts.key") "neo" "oracle")

(defun neo ()
  (let* ((host "neo")
	 (user "andy")
	 (sword 
	  (rhostent (expand-file-name "~/n/private/.rhosts.key") host user)))
    (if (host-exists "neo")

	(let ((dir "//neo/info" ))
	  (eval-process "net" "use" 
			(format "\\\\%s" host) sword (format "/user:%s" user))

	  (and (host-ok dir t 500)
	       (or (member dir Info-default-directory-list )
		   (setq Info-default-directory-list 
			 (append Info-default-directory-list (list dir))
			 Info-directory-list Info-default-directory-list )))

  ; force recompute of info directory if necessary
	  (if (and (assoc "info" load-history)
		   (buffer-exists-p "*info*"))
	      (kill-buffer "*info*"))
	  )
      )
    )
  )
; (neo)


(add-hook 'fb-mode-hook 'fb-additional-setup)

(defun fb-file-info () (interactive)
  "
 0. t for directory, string (name linked to) for symbolic link, or nil.
 1. Number of links to file.
 2. File uid.
 3. File gid.
 4. Last access time, as a list of two integers.
  First integer has high-order 16 bits of time, second has low 16 bits.
 5. Last modification time, likewise.
 6. Last status change time, likewise.
 7. Size in bytes.
  This is a floating point number if the size is too large for an integer.
 8. File modes, as a string of ten letters or dashes as in ls -l.
 9. t iff file's gid would change if file were deleted and recreated.
10. inode number.  If inode number is larger than the Emacs integer,
  this is a cons cell containing two integers: first the high part,
  then the low 16 bits.
11. Device number.
"
  (let* ((fn (indicated-word))
	 (a (file-attributes fn)))
  ; -rw-r--r--   1 544      everyone     2655 Mar 28  1998 woody
    (if a
	(message "%s %-4d %-4d %s %d %s %s"

	    (elt a 8)
	    (elt a 3)
	    (elt a 2)
	    "everyone"
	    (elt a 7)
	    (format-time-string "%b %d %Y" (elt a 5))
	    (file-name-nondirectory fn)
	    )
      (message "file not found"))
    )
  )

(defun fb-additional-setup () 
  (define-key fb-mode-map "i" 'fb-file-info)
  )

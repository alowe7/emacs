#!/usr/local/bin/perl
#      $Id: make-autoloads,v 1.18 2003-10-24 13:30:31 cvs Exp $

=pod
=head1 NAME

make-autoloads

=head1 SYNOPSIS

 make-autoloads [options] | <filelist>
	
	produce an expression on STDOUT which can be evaluated to autoload
	all functions and macros defined in those modules.
	<filelist> is a list of emacs lisp modules.
	
=head1 DESCRIPTION

	options:
		--help		print usage
		--prefix <prefix>	optional prefix for alist (default=basename(pwd()))
		--version	print version

=cut

use Getopt::Long;
use Pod::Text;

binmode STDOUT;

GetOptions(
	   'help' => \$opt_help,
	   'version' => \$opt_version,
	   'prefix=s' => \$opt_prefix
	   );

$opt_h && pod2usage( { -verbose => 2 });

if ($opt_version) {
# sadly gives goofy trailing $
#    $version="$Revision: 1.18 $";
    print "make-autoloads version 1.15\n";
    exit;
}

if ($opt_prefix) {
    $prefix=$opt_prefix . "-";
}
else {
    $PWD=`pwd`;
    chop $PWD; 
    split('/',$PWD);
    $prefix=$_[-1] . "-";
}

$alist_symbol=$prefix . "autoload-alist";

# todo: lexer?
# todo: grab doc strings too
print "(setq $alist_symbol `( ";

foreach $fn (@ARGV) {
    if ($fn =~ /\.autoloads$/) {
	print "(load-file \"$fn\")\n";
    }
    else {
	foreach $def ("defun", "defmacro", "define-derived-mode") {
	    @path=split(?/?, $fn);
	    $f=pop(@path);
	    open(F, $fn);
	    binmode F;
	    foreach (<F>) {
		if (/^\($def/) {
		    ($pat, $func)=split;
		    if (($pat eq "(defun") ||
		        ($pat eq "(defun*") ||
		        ($pat eq "(defvar") ||
			($pat eq "(defmacro")) {
# clean up defs like (defun foo() ...)
			$func =~ s/[()]//g;
			print "($func \"$f\")\n";
		    }
		}
		close(F);
	    }
	}
    }
}
print "))\n";

print "(mapcar '(lambda (x) (autoload (car x) (cadr x) nil t)) $alist_symbol)\n";


; -*-emacs-lisp-*-

(put 'w32 'rcsid 
 "$Id: w32,v 1.17 2001-08-24 19:20:58 cvs Exp $")

(require 'cat-utils)
(load "frames" t t)

; definitions specific to the win32 window system

(defvar *systemroot*	(getenv "SYSTEMROOT"))
(defvar *systemdrive*	(getenv "SYSTEMDRIVE"))
(defvar *username*	(getenv "USERNAME"))

(autoload 'reg-query "reg" nil t)
(autoload 'reg-dump "reg" nil t)

;(setq frame-title-format '(buffer-file-name "%f" "%b"))
;(make-variable-buffer-local 'frame-title-format)

(setq dired-chmod-program "chmod")

;; (menu-bar-enable-clipboard)
;; (menu-bar-mode -1)
;(menu-bar-mode -1)

;; this makes autocompletion work better with bash
(setq comint-completion-addsuffix t)


;; (global-set-key "\C-:" (quote indent-for-comment))
(global-set-key (vector 'C-backspace) 'iconify-frame)

;; jean-luc fonty

(defvar default-fontspec-format  "-*-%s-%s-r-*-*-%s-%s-*-*-*-*-*-*-")
(defvar  default-family-table 
	(mapcar 'list (list "Roman" "MS LineDraw" "Lucida Console" "fixed" "courier")))
(defvar default-font-family "lucida console")
(defvar default-point-size 17)
(defvar default-style "normal")
(defvar default-weight nil)
(defvar default-fontspec nil)

(defun default-font (&optional font-family style point-size weight)
  (interactive (list
		(completing-read "Family: " default-family-table)
		(read-string "Style: ")
		(read-string "Point-size: ")
		(read-string "Weight: ")))

  (and (stringp point-size) 
       (> (length point-size) 0)
       (setq point-size (read point-size)))

  (cond ((eq point-size '*)
	 (setq default-point-size nil))
	((integerp point-size) 
	 (setq default-point-size point-size)))

  (and (stringp style)
       (> (length style) 0)
       (setq default-style style))

  (and (stringp weight)
       (> (length weight) 0)
       (setq weight (read weight)))

  (cond ((eq weight '*)
	 (setq default-weight nil))
	((integerp weight)
	 (setq default-weight weight)))

  (and font-family (setq default-font-family font-family))
	
  (set-default-font (setq default-fontspec
			  (format default-fontspec-format   
				  font-family 
				  default-style
				  default-point-size
				  default-weight)))
  default-fontspec
  )

;(default-font nil "*" "100")

(defun font-1 (arg) (interactive "p")
	(default-font default-font-family default-style (- default-point-size (or arg 1)) nil))

(defun font+1 (arg) (interactive "p")
	(default-font default-font-family default-style (+ default-point-size (or arg 1)) nil))

(global-set-key "]" 'font+1)
(global-set-key "[" 'font-1)


(defun w32-canonify (f &optional sysdrive)
  " expands FILENAME, using backslashes
optional DRIVE says which drive to use. "
  (replace-in-string  "/" "\\" 
		      (expand-file-name 
	(substitute-in-file-name
		       (chop f ?/))
		       (concat sysdrive "/"))))

(defun unix-canonify (f &optional mixed)
  " expands FILENAME, using forward slashes.
optional second arg MIXED says do not translate 
letter drive names.
if MIXED is 0, then ignore letter drive names.
"
  (let ((f (expand-file-name f)))
    (if (null mixed)
	f
      (let
	  ((m (string-match "^[a-zA-Z]:" f)))
	(if (eq mixed 0)
	    (substring f (match-end 0))
	  (concat "//" (upcase (substring f 0 1)) (substring f (match-end 0)))
	  )
	)))
  )

(defun gsn (f) 
  "get short name for f"
  (clean-string (eval-process "gsn" f))
  )

(defvar explore-hooks nil "hooks to run after exploring a directory")

(defun explore (&optional f)  (interactive "P")
  (let ((root *systemroot*)
	(f (gsn (w32-canonify (string* f (string* (read-string "Directory: ") (pwd))))) 
	   ))

    (call-process 
     (concat root "\\system32\\cmd") nil nil nil "/c" 
     (concat root "\\explorer ") f)
     (run-hooks 'explore-hooks)
     )
  )

(defun arun (f) (interactive "sCommand: ")
  (start-process f nil f ))
;; this depends on the query.bat being on your path


(defun aexec (f &optional visit)
  "apply command associated with filetype to specified FILE
filename may have spaces in it, so double-quote it.
handlers may be found from the variable `file-assoc-list' or 
failing that, via `file-association' 
if optional VISIT is non-nil and no file association can be found just visit file, otherwise
 display a message  "
  (interactive "sFile: ")
  (let* ((ext (file-name-extension f))
	(handler (and ext (assoc (downcase ext) file-assoc-list))))
    (if handler (funcall (cdr handler) f)
      (let ((cmd (file-association f)))
	(cond (cmd 
	       (start-process f nil "cmd" "/c" cmd (format "\"%s\"" f)))
	      (visit (find-file f))
	      (t (progn
		   (message
		    "no handler for type %s ... " 
		    (file-name-extension f))
		   (sit-for 0 500)
		   (message "visiting file %s ..." f)
		   (sit-for 0 800)
		   (find-file f)
		   (message ""))
		 )
	      )
	)
      )
    )
  )

(defvar last-dosexec "")
(defun dosexec (cmd) 
  "run as a dos parented program"
  (interactive (list (read-string (format "scommand (%s): " last-dosexec))))
  (let ((f (if (eq major-mode (quote dired-mode))
	       (dired-get-filename)
	     (read-file-name "input file: ")))
	(cmd (if 
		 (and (<= (length cmd) 0)
		      (> (length last-dosexec) 0))
		 last-dosexec cmd)))
    (setq last-dosexec cmd)
    (start-process (format "dosexec %s" cmd) nil "cmd" "/c" cmd f))
  )


;; world helpers ;;
(defun ewn  (&optional w go sub)
  "expore file in W named F"
  (interactive "P")
  (wn w go 'explore))

(defun ewd  (&optional w go sub)
  (interactive "P")
  (wd w 'explore))

(defun md (&optional arg) (interactive "P") 
  (explore  (expand-file-name (if arg 
				  (read-file-name "Directory to browse: " (pwd) nil t)
				default-directory))))

(make-variable-buffer-local 'explicit-shell-file-name)
(defun cmd (&optional num)
  (interactive "p")
  (shell2 (or num -1) nil "cmd")
  )

(global-set-key (vector -8388595) 'cmd)

(global-set-key (vector 'f10) 'ewn)
(global-set-key (vector 'f11) 'ewd)
(global-set-key (vector 'f12) 'md)
(global-set-key (vector 'f4) 'arun)
(global-set-key (vector 'f5) 'aexec)
(global-set-key (vector 'f6) 'dosexec)


;; XXX this fixes the bug in dired
;; protect against bad args.  this seems to be preloaded, so...
;; maybe advice would work better
(defun ls-lisp-time-lessp (TIME0 TIME1)
  (condition-case badarg
      (cond ((= (car TIME0) (car TIME1)) (< (cadr TIME0) (cadr TIME1)))
	    ((< (car TIME0) (car TIME1)) t)
	    (t nil))
    ('wrong-type-argument nil)
    )
  )

(defun w32-canonify-environment-variable (f)
  "convert unix style env var to dos style."
  (while (string-match "\$[a-zA-Z0-9_]+" f)
      (format "%%%s%%" (substring f (1+ (match-beginning 0)) (match-end 0)))
    )
  )

(defun yank-dos-environment-variable (begin &optional end)
  "this function translates the region between BEGIN and END using `w32-canonify-environment-variable' and copies the result into the kill-ring.
if `interprogram-cut-function' is defined, it is invoked with the canonified result.
when called from a program, if BEGIN is a string, then use it as the kill text instead of the region
"
  (interactive "r")

  (let ((txt (w32-canonify-environment-variable (string* begin (buffer-substring begin end)))))
    (kill-new txt)
    (if interprogram-cut-function
	(funcall interprogram-cut-function txt t))
    txt))

(global-set-key "e" 'yank-dos-environment-variable)

(defun yank-dos-filename (begin &optional end)
  "this function translates the region between BEGIN and END using `w32-canonify' and copies the result into the kill-ring.
if `interprogram-cut-function' is defined, it is invoked with the canonified result.
when called from a program, if BEGIN is a string, then use it as the kill text instead of the region
"
  (interactive "r")

  (let ((txt (w32-canonify (string* begin (buffer-substring begin end)))))
    (kill-new txt)
    (if interprogram-cut-function
	(funcall interprogram-cut-function txt t))
    txt))

(defun yank-unix-filename (begin end)
  "this function translates the region between BEGIN and END using `unix-canonify' and copies the result into the kill-ring.
if `interprogram-cut-function' is defined, it is invoked with the canonified result.
when called from a program, if BEGIN is a string, then use it as the kill text instead of the region"
  (interactive "r")
  (let* ((txt
	  (unix-canonify (string* begin (buffer-substring begin end)) t)))
    (kill-new txt)
    (if interprogram-cut-function
	(funcall interprogram-cut-function txt t))
    txt))

(global-set-key "w" 'yank-dos-filename)
(global-set-key "y" 'yank-unix-filename)

(defun dired-cut-filename ()
  (interactive)
  (yank-dos-filename (buffer-substring (point) (mark)))
  )

(add-hook 'dired-mode-hook '(lambda () 
			      (define-key dired-mode-map "" 'dired-cut-filename)))
(add-hook 'buffer-menu-mode-hook '(lambda () 
				    (define-key Buffer-menu-mode-map "" 'dired-cut-filename)))


(defun eau () 
  "visit all-users profile"
  (interactive)
  (dired "/WINNT/Profiles/All Users/Start Menu/Programs"))

(defun eu ()
  "visit users profile" 
  (interactive)
  (dired (getenv "USERPROFILE")))

(defun hard-fill  (from to)
  (interactive "r")
  (goto-char from)
  (while (search-forward  "
" nil t)
    (replace-match  "

" nil t))

  (fill-nonuniform-paragraphs from to nil)
  )

(defun soft-fill-region (from to)
  (interactive (list (region-beginning) (region-end)))
  (call-interactively 'trim-white-space)
  (let ((a (min from to)) (b (max from to)))
    (dolist (x '(
		 ("

" "|")
		 ("
" " ")
		 ("|" "

")))
      (goto-char a)
      (while (search-forward (car x) b t)
	(replace-match (cadr x) t))
      )
    ))

(global-set-key "" 'soft-fill-region)

(setq w3-load-hooks '(lambda () 
		       (load-library "w3-helpers") 
		       (load-library "url-helpers")
		       ))

(defvar catalogs '("c:/tmp/f")) ;  "d:/f"

(defun fastfind (pat) 
  "find files matching PATTERN in catalogs"
  (interactive "spattern to find: ")
  (let ((b (zap-buffer "*fastfind*")))
    (dolist (f catalogs)
      (if (file-exists-p f)
	  (progn
	    (insert "***" f "***\n") 
	    (call-process "egrep" f b t "-i" pat)
	    ))
      )
    (pop-to-buffer b)
    (beginning-of-buffer)
    (set-buffer-modified-p nil)
    ))

; ESC-@ initialize printer
; ESC-l left margin
(defconst dos-print-header-format "@l%c")
(defconst dos-print-trailer "@" "special printing characters")

(defvar print-processes nil)
;(pop print-processes)
;(setq c (caar print-processes))
;(cdr (assq c  print-processes))

(defun print-process-sentinel (process msg)
  ;  (read-string (format "gotcha: %s" msg))
  (if (string-match "finished" msg) 
      (let ((a (assq process print-processes)))
	(setq print-processes (remq process print-processes))
	(and (file-exists-p (cdr a)) (delete-file (cdr a)))
  ;				(pop-to-buffer " *PRN*")
	)
    )
  )

(defconst esc-font-format "k%c")
(defconst esc-fonts '(Roman
		      SansSerif
		      Courier
		      Prestige
		      Script))
(defconst esc-proprotional "!")

(defun relt (sequence val)
  "reverse elt: return n of sequence whose value equals val"
  (let ((len (length sequence)))
    (loop with i = 0
	  when (equal (elt sequence i) val) return i
	  when (> i len) return nil
	  do (setq i (1+ i))))
  )


(defun* dos-print-region (from to &key font fixed)

  "print REGION as text.
 with prefix ARG, use that as left margin.
 see dos-print-header for default parameters."

  (interactive "r")

  (let* ((dos-print-header
	  (format dos-print-header-format
		  (or current-prefix-arg 2)))
	 (esc-font (relt esc-fonts font))
	 (s (buffer-substring from to))
	 (b (generate-new-buffer " *print*"))
	 (fn (concat "c:\\tmp\\" (make-temp-name (format "__%s" (gensym)))))
	 p)
    (set-buffer b)
    (insert dos-print-header)
    (and esc-font (insert (format esc-font-format esc-font)))
    (unless fixed (insert esc-proprotional))
    (insert s)
    (insert dos-print-trailer)
    (write-region (point-min) (point-max) fn)
    (kill-buffer b)
  ; use process-sentinel to catch completion
  ;		(call-process "cmd" nil 0 nil "/c" "print" fn)
    (set-process-sentinel 
     (setq p (start-process "prn" (get-buffer-create " *PRN*") "cmd" "/c" "print" fn))
     'print-process-sentinel)
    (push (cons p fn) print-processes)
    )
  )

(defun dos-print-buffer ()
  (interactive)
  (dos-print-region (point-min) (point-max))
  )
 
(defun dos-print (file) 
  (interactive "fFile: ")
  (let* ((ob (find-buffer-visiting file))
	 (b (or ob (find-file-noselect file))))
    (if b
	(save-excursion
	  (set-buffer b)
	  (dos-print-buffer)))
    (or ob (kill-buffer b))))


(add-hook 'dired-load-hook
	  '(lambda () 
	     (define-key dired-mode-map "R" 'dired-move-marked-files)
	     (define-key dired-mode-map "C" 'dired-copy-marked-files))
	  )

(defun mktemp (pat)
  "make a temporary filename based on tmpdir"
  (expand-file-name (format "%s/%s" (getenv "TMP") pat))
  )

(defvar grep-null-device "nul")

(add-hook 
 'people-load-hook 
 '(lambda ()
    (require 'advice)
  ; some goofy advice to handle lists of filenames that may have spaces in them
    (defadvice contact-cachep (after hanger activate)
      (setq ad-return-value 
	    (loop for x in ad-return-value collect 
		  (if (string-match " " x) (concat "\"" x "\"") x))))
    )
 )

(add-hook 'make-frame-hook 
	  '(lambda () 
	     (modify-frame-parameters
	      nil
	      '((left . 140) (top . 80) (height . 30) (width . 72)))))
; (pop make-frame-hook)

; may want to check out file-name-buffer-file-type-alist

(setq file-name-buffer-file-type-alist nil)
(standard-display-8bit 129 255)
; (setq-default buffer-file-coding-system 'undecided-unix)
(setq-default buffer-file-coding-system nil)
; (setq coding-system-for-write 'no-conversion)
(setq coding-system-for-write nil)

; todo: (alldrives) returns enumeration of drives in use

(defun vp (&optional user)
  "visit profile directory for USER.  default is current user"
  (interactive)
  (dired  (expand-file-name
	   (concat *systemroot* "/profiles/" (or user *username*) "/Personal/" nil)))

  )

(defun browse-path () 
  "pringle path in a browser buffer"
  (interactive)
  (let ((temp-buffer-show-function '(lambda (buf)
				      (debug)
				      (set-buffer buf)
				      (fb-mode)))))

  (with-output-to-temp-buffer "foo"
    (mapcar '(lambda (x) (princ (expand-file-name x)) (princ "\n")) (catpath "PATH" (if (eq window-system 'win32) semicolon)))
    )
  )


(defun control-panel (c) 
  "run control panel applets"
  (interactive
   (list
    (completing-read
     "?" 
     (mapcar
      '(lambda (x)
	 (list
	  (file-name-sans-extension x)))
      (directory-files (expand-file-name (concat *systemroot* "/system32")) nil "cpl$")
      )
     )))

  (let ((p (get-process "cpl")))
    (and p (kill-process p))
    (start-process "cpl" nil "control" (concat c ".cpl")
		   )
    )
  )


(defun domainname () 
  (clean-string (reg-query "machine" 
			   "system/currentcontrolset/services/tcpip/parameters" "domain"))
  )

(add-hook 'post-load-hook 
	  '(lambda () 
	     (defvar w32-documents "/Documents and Settings" 
	       "top level dir for all user documents and settings")

	     (defvar my-documents
	       (w32-canonify 
		(concat w32-documents "/$USERNAME"))
	       "top level dir for current users documents and settings")

	     (defvar start-menu
	       (w32-canonify 
		(concat w32-documents "/$USERNAME" "/Start Menu"))
	       "top level dir for current users documents and settings")

	     (defvar quicklaunch
	       (w32-canonify 
		(concat
		 "C:\\Documents and Settings\\" 
		 *username*
		 "\\Application Data\\Microsoft\\Internet Explorer\\Quick Launch"
		 )))
	     ))

(mapcar '(lambda (x) 
	   (eval (list 'defun x nil '(interactive) (list 'dired x))))
	'(w32-documents my-documents start-menu quicklaunch))

(defun w32-mangle-filename (f)
  "reports default-directory as a win32 8.3 file name"
  (clean-string
   (eval-process "gsn" f))
  )

; (w32-mangle-filename "d:/Program Files/Microsoft Visual Studio/VC98/Bin")

(defun swf (fn)
  "find files relative to systemroot"
  (interactive "sFilename: ")
  (let ((f (car (split (perl-command "swf" fn) "
"))))
    (if f 
	(find-file f)
      (message "%s not found" f))
    )
  )

(defun net (cmd) 
  "implement net command"
  (interactive "scmd: ")

  (let ((b (zap-buffer "*net*")))
    (set-buffer b)
    (insert-eval-process
     (cond
      ((string-equal cmd "use")
       (let* ((host (read-string "host: " )))
	 (cond ((string* host)
		(let* ((user (read-string (format "username for %s: " host)))
		       (sword (comint-read-noecho "password: " )))
		  (format "net use \\\\%s %s /user:%s"
			  host sword user)))
	       (t "net use"))))
      (t
       (format "net %s" cmd))
      )
     )
    (pop-to-buffer b)
    (view-mode)
    (beginning-of-buffer)
    )
  )

(defun host (n) 
  "report host/ip windows style"
  (interactive "sname: ")

  (message (clean-string (perl-command "host" n)))
  )

(defvar semicolon (read "?;"))
(defvar w32 'w32)

(defvar *mesagebox-default-flags* "MB_OK|MB_ICONINFORMATION|MB_SETFOREGROUND")

(defun messagebox (msg &optional title flags)
  "put up a messagebox"
  (interactive "smessage: ")
  (let ((l (list msg)))
    (if (string* title)
	(setq l (nconc (list "-t" title) l)))
    (setq l (nconc (list "-f" (string* flags *mesagebox-default-flags*)) l))
    (setq l (cons "messagebox" l))

    (message (clean-string (apply 'perl-command l)))
    )
  )

; (messagebox "every good boy does fine" "r u there?" "MB_OKCANCEL|MB_ICONINFORMATION|MB_SETFOREGROUND")

(defun msvc-setting ()
  (interactive)
  (let ((p (point)))
    (goto-char (point-min))
    (replace-string "," "
")
    (goto-char (point-min))
    (local-set-key "" '(lambda () (interactive) (throw 'exit nil)))
    (recursive-edit)
    (goto-char (point-min))
    (replace-string "
" ",")
    (goto-char p)
    )
  )
